profiles {
 gls {
   process.executor = 'google-lifesciences'
   workDir = 'gs://xxxx/run_name/workdir/'
   google.location = 'europe-west2'
   google.region  = 'europe-west2'
   google.project = 'xxxx-pipelines-dev'
   google.lifeSciences.usePrivateAddress = 'true'
   process.publishDir = 'gs://xxx/run_name/resultsdir/'
 }
}
trace {
  enabled = true
  file = "pipeline_execution_trace.txt"
  fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,syscr,syscw,read_bytes,write_bytes'
}

tower {
  accessToken = 'xxxxxx'
  enabled = true
}

params {
  max_memory = 100.GB
  max_time = 240.h
  singleCPUMem = 6.5.GB
}

process {
  // default machine type
  machineType = 'n1-standard-4'

  withLabel:cpus_1 {
    machineType = 'n1-standard-1'
    cpus = {check_resource(1)}
  }
  withLabel:cpus_2 {
    machineType = 'n1-standard-2'
    cpus = {check_resource(2)}
  }
  withLabel:cpus_4 {
    machineType = 'n1-standard-4'
    cpus = {check_resource(4)}
  }
  withLabel:cpus_8 {
    machineType = 'n1-standard-8'
    cpus = {check_resource(8)}
  }
  withLabel:cpus_16 {
    machineType = 'n1-standard-16'
    cpus = {check_resource(16)}
  }
  withLabel:cpus_max {
    machineType = 'n1-standard-16'
    cpus = {params.max_cpus}
  }

  withLabel:memory_singleCPU_2_task {
    machineType = 'n1-highmem-4'
    memory = {check_resource(16.GB * task.attempt)}
  }
  withLabel:memory_singleCPU_task_sq {
    machineType = 'n1-highmem-4'
    memory = {check_resource(8.GB * task.attempt * task.attempt)}
  }

  withLabel:memory_max {
    machineType = 'n1-highmem-16'
    memory = {params.max_memory}
  }

  withName:MapReads {
    machineType = 'custom-20-81920'
    memory = {check_resource(60.GB * task.attempt)}
    time = {check_resource(48.h * task.attempt)}
    disk = '1000 GB' // larger disk here for improved I/O
  }

  withName:FastQCFQ {
    machineType = 'n1-standard-4'
  }

  withName:BamQC {
    machineType = 'n1-highmem-16'
  }

  withName:MarkDuplicates {
    machineType = 'n1-highmem-2'
    cpus = {check_resource(2)}
    disk = '2048 GB' // larger disk here for improved I/O
  }

  withName:BaseRecalibrator {
  machineType = 'n1-highmem-2'
  }

  withName:ApplyBQSR {
  machineType = 'n1-highmem-4'
  }

  withName:GenotypeGVCFs {
    machineType = 'n1-standard-4'
    disk = '1000 GB' // larger disk here for improved I/O
  }
  withName:HaplotypeCaller {
    machineType = 'n1-standard-4'
    disk = '1000 GB' // larger disk here for improved I/O
  }
}

// THIS SHOULD BE DEFINED IN BASIC CONFIG BUT IT NEEDS IT HERE ANYWAY
// Return the minimum between requirements and a maximum limit to ensure that resource requirements don't go over
def check_resource(obj) {
    try {
      if (obj.getClass() == nextflow.util.MemoryUnit && obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else if (obj.getClass() == nextflow.util.Duration && obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else if (obj.getClass() == java.lang.Integer)
        return Math.min(obj, params.max_cpus as int)
      else
        return obj
    } catch (all) {
        println "   ### ERROR ###   Max params max_memory:'${params.max_memory}', max_time:'${params.max_time}' or max_cpus:'${params.max_cpus}'  is not valid! Using default value: $obj"
    }
}
